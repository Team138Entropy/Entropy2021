package frc.robot;

import com.ctre.phoenix.ErrorCode;
import com.ctre.phoenix.ParamEnum;
import com.ctre.phoenix.motion.BufferedTrajectoryPointStream;
import com.ctre.phoenix.motion.MotionProfileStatus;
import com.ctre.phoenix.motion.TrajectoryPoint;
import com.ctre.phoenix.motorcontrol.ControlFrame;
import com.ctre.phoenix.motorcontrol.ControlMode;
import com.ctre.phoenix.motorcontrol.DemandType;
import com.ctre.phoenix.motorcontrol.Faults;
import com.ctre.phoenix.motorcontrol.FeedbackDevice;
import com.ctre.phoenix.motorcontrol.FollowerType;
import com.ctre.phoenix.motorcontrol.IMotorController;
import com.ctre.phoenix.motorcontrol.InvertType;
import com.ctre.phoenix.motorcontrol.LimitSwitchNormal;
import com.ctre.phoenix.motorcontrol.LimitSwitchSource;
import com.ctre.phoenix.motorcontrol.NeutralMode;
import com.ctre.phoenix.motorcontrol.RemoteFeedbackDevice;
import com.ctre.phoenix.motorcontrol.RemoteLimitSwitchSource;
import com.ctre.phoenix.motorcontrol.RemoteSensorSource;
import com.ctre.phoenix.motorcontrol.SensorCollection;
import com.ctre.phoenix.motorcontrol.SensorTerm;
import com.ctre.phoenix.motorcontrol.StatusFrame;
import com.ctre.phoenix.motorcontrol.StatusFrameEnhanced;
import com.ctre.phoenix.motorcontrol.StickyFaults;
import com.ctre.phoenix.motorcontrol.SupplyCurrentLimitConfiguration;
import com.ctre.phoenix.motorcontrol.TalonSRXFeedbackDevice;
import com.ctre.phoenix.motorcontrol.VelocityMeasPeriod;
import com.ctre.phoenix.motorcontrol.can.FilterConfiguration;
import com.ctre.phoenix.motorcontrol.can.SlotConfiguration;
import com.ctre.phoenix.motorcontrol.can.TalonSRXConfiguration;
import com.ctre.phoenix.motorcontrol.can.TalonSRXPIDSetConfiguration;
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;
import com.ctre.phoenix.sensors.CANCoder;
import edu.wpi.first.wpilibj.Sendable;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.smartdashboard.SendableBuilder;
import javax.annotation.Nullable;

/**
 * This class provides a wrapper around WPITalonSRX that works in the robot simulator All method
 * calls are logged (see Loggers.SIMULATEDTALON in Constants.java) All methods with a primitive
 * return type return 0 or false, and all object return types return null You should check for
 * these, or check Robot.isReal() to determine if the code is being run in the simulator
 */
@SuppressWarnings("deprecated")
public class OurWPITalonSRX implements IMotorController, SpeedController, Sendable {
  @Nullable public WPI_TalonSRX thisTalon;

  private int deviceNumber;
  private static Logger mLogger = new Logger(Constants.Loggers.SIMULATEDTALON);

  public OurWPITalonSRX(int deviceNumber) {
  this.deviceNumber = deviceNumber;
    if (Robot.isReal()) {
      thisTalon = new WPI_TalonSRX(deviceNumber);
    }
  }

  // everything below is AUTOGENERATED until the end of the file
  // see /scraper.js for more info
  // methods that gave build errors were removed
  public void set(double speed) {
    if (Robot.isReal()) {
      thisTalon.set(speed);
    } else {
      mLogger.verbose(deviceNumber + ": set(" + String.valueOf(speed) + ")");
    }
  }

  public void pidWrite(double output) {
    if (Robot.isReal()) {
      thisTalon.pidWrite(output);
    } else {
      mLogger.verbose(deviceNumber + ": pidWrite(" + String.valueOf(output) + ")");
    }
  }

  public double get() {
    if (Robot.isReal()) {
      return thisTalon.get();
    } else {
      mLogger.verbose(deviceNumber + ": get()");
      return 0;
    }
  }

  public void set(ControlMode mode, double value) {
    if (Robot.isReal()) {
      thisTalon.set(mode, value);
    } else {
      mLogger.verbose(
          deviceNumber + ": set(" + String.valueOf(mode) + ", " + String.valueOf(value) + ")");
    }
  }

  //TODO: Probably fix?
  /*
  public void set(ControlMode mode, double demand0, double demand1) {
    if (Robot.isReal()) {
      thisTalon.set(mode, demand0, demand1);
    } else {
      mLogger.verbose(
          deviceNumber
              + ": set("
              + String.valueOf(mode)
              + ", "
              + String.valueOf(demand0)
              + ", "
              + String.valueOf(demand1)
              + ")");
    }
  }
  */

  public void set(ControlMode mode, double demand0, DemandType demand1Type, double demand1) {
    if (Robot.isReal()) {
      thisTalon.set(mode, demand0, demand1Type, demand1);
    } else {
      mLogger.verbose(
          deviceNumber
              + ": set("
              + String.valueOf(mode)
              + ", "
              + String.valueOf(demand0)
              + ", "
              + String.valueOf(demand1Type)
              + ", "
              + String.valueOf(demand1)
              + ")");
    }
  }

  public void setVoltage(double outputVolts) {
    if (Robot.isReal()) {
      thisTalon.setVoltage(outputVolts);
    } else {
      mLogger.verbose(deviceNumber + ": setVoltage(" + String.valueOf(outputVolts) + ")");
    }
  }

  public void setInverted(boolean isInverted) {
    if (Robot.isReal()) {
      thisTalon.setInverted(isInverted);
    } else {
      mLogger.verbose(deviceNumber + ": setInverted(" + String.valueOf(isInverted) + ")");
    }
  }

  public boolean getInverted() {
    if (Robot.isReal()) {
      return thisTalon.getInverted();
    } else {
      mLogger.verbose(deviceNumber + ": getInverted()");
      return false;
    }
  }

  public void disable() {
    if (Robot.isReal()) {
      thisTalon.disable();
    } else {
      mLogger.verbose(deviceNumber + ": disable()");
    }
  }

  public void stopMotor() {
    if (Robot.isReal()) {
      thisTalon.stopMotor();
    } else {
      mLogger.verbose(deviceNumber + ": stopMotor()");
    }
  }

  public void free() {
    if (Robot.isReal()) {
      thisTalon.free();
    } else {
      mLogger.verbose(deviceNumber + ": free()");
    }
  }

  public final synchronized String getName() {
    if (Robot.isReal()) {
      return thisTalon.getName();
    } else {
      mLogger.verbose(deviceNumber + ": getName()");
      return null;
    }
  }

  public final synchronized void setName(String name) {
    if (Robot.isReal()) {
      thisTalon.setName(name);
    } else {
      mLogger.verbose(deviceNumber + ": setName(" + String.valueOf(name) + ")");
    }
  }

  public final void setName(String moduleType, int channel) {
    if (Robot.isReal()) {
      thisTalon.setName(moduleType, channel);
    } else {
      mLogger.verbose(
          deviceNumber
              + ": setName("
              + String.valueOf(moduleType)
              + ", "
              + String.valueOf(channel)
              + ")");
    }
  }

  public final void setName(String moduleType, int moduleNumber, int channel) {
    if (Robot.isReal()) {
      thisTalon.setName(moduleType, moduleNumber, channel);
    } else {
      mLogger.verbose(
          deviceNumber
              + ": setName("
              + String.valueOf(moduleType)
              + ", "
              + String.valueOf(moduleNumber)
              + ", "
              + String.valueOf(channel)
              + ")");
    }
  }

  public final synchronized String getSubsystem() {
    if (Robot.isReal()) {
      return thisTalon.getSubsystem();
    } else {
      mLogger.verbose(deviceNumber + ": getSubsystem()");
      return null;
    }
  }

  public final synchronized void setSubsystem(String subsystem) {
    if (Robot.isReal()) {
      thisTalon.setSubsystem(subsystem);
    } else {
      mLogger.verbose(deviceNumber + ": setSubsystem(" + String.valueOf(subsystem) + ")");
    }
  }

  public final void addChild(Object child) {
    if (Robot.isReal()) {
      thisTalon.addChild(child);
    } else {
      mLogger.verbose(deviceNumber + ": addChild(" + String.valueOf(child) + ")");
    }
  }

  public void initSendable(SendableBuilder builder) {
    if (Robot.isReal()) {
      thisTalon.initSendable(builder);
    } else {
      mLogger.verbose(deviceNumber + ": initSendable(" + String.valueOf(builder) + ")");
    }
  }

  public String getDescription() {
    if (Robot.isReal()) {
      return thisTalon.getDescription();
    } else {
      mLogger.verbose(deviceNumber + ": getDescription()");
      return null;
    }
  }

  public void feed() {
    if (Robot.isReal()) {
      thisTalon.feed();
    } else {
      mLogger.verbose(deviceNumber + ": feed()");
    }
  }

  public void setExpiration(double expirationTime) {
    if (Robot.isReal()) {
      thisTalon.setExpiration(expirationTime);
    } else {
      mLogger.verbose(deviceNumber + ": setExpiration(" + String.valueOf(expirationTime) + ")");
    }
  }

  public double getExpiration() {
    if (Robot.isReal()) {
      return thisTalon.getExpiration();
    } else {
      mLogger.verbose(deviceNumber + ": getExpiration()");
      return 0;
    }
  }

  public boolean isAlive() {
    if (Robot.isReal()) {
      return thisTalon.isAlive();
    } else {
      mLogger.verbose(deviceNumber + ": isAlive()");
      return false;
    }
  }

  public void setSafetyEnabled(boolean enabled) {
    if (Robot.isReal()) {
      thisTalon.setSafetyEnabled(enabled);
    } else {
      mLogger.verbose(deviceNumber + ": setSafetyEnabled(" + String.valueOf(enabled) + ")");
    }
  }

  public boolean isSafetyEnabled() {
    if (Robot.isReal()) {
      return thisTalon.isSafetyEnabled();
    } else {
      mLogger.verbose(deviceNumber + ": isSafetyEnabled()");
      return false;
    }
  }

  //TODO: Fix
  /*
  public void set(TalonSRXControlMode mode, double value) {
    if (Robot.isReal()) {
      throw new RuntimeException("Not implemented!");
    } else {
      mLogger.verbose(
          deviceNumber + ": set(" + String.valueOf(mode) + ", " + String.valueOf(value) + ")");
    }
  }
  */

  /*
  public void set(
      TalonSRXControlMode mode, double demand0, DemandType demand1Type, double demand1) {
    if (Robot.isReal()) {
      throw new RuntimeException("Not implemented!");
    } else {
      mLogger.verbose(
          deviceNumber
              + ": set("
              + String.valueOf(mode)
              + ", "
              + String.valueOf(demand0)
              + ", "
              + String.valueOf(demand1Type)
              + ", "
              + String.valueOf(demand1)
              + ")");
    }
  }
  */

  public SensorCollection getSensorCollection() {
    if (Robot.isReal()) {
      return thisTalon.getSensorCollection();
    } else {
      mLogger.verbose(deviceNumber + ": getSensorCollection()");
      return null;
    }
  }

  public ErrorCode configSelectedFeedbackSensor(
      TalonSRXFeedbackDevice feedbackDevice, int pidIdx, int timeoutMs) {
    if (Robot.isReal()) {
      return thisTalon.configSelectedFeedbackSensor(feedbackDevice, pidIdx, timeoutMs);
    } else {
      mLogger.verbose(
          deviceNumber
              + ": configSelectedFeedbackSensor("
              + String.valueOf(feedbackDevice)
              + ", "
              + String.valueOf(pidIdx)
              + ", "
              + String.valueOf(timeoutMs)
              + ")");
      return null;
    }
  }

  public ErrorCode configSupplyCurrentLimit(
      SupplyCurrentLimitConfiguration currLimitConfigs, int timeoutMs) {
    if (Robot.isReal()) {
      return thisTalon.configSupplyCurrentLimit(currLimitConfigs, timeoutMs);
    } else {
      mLogger.verbose(
          deviceNumber
              + ": configSupplyCurrentLimit("
              + String.valueOf(currLimitConfigs)
              + ", "
              + String.valueOf(timeoutMs)
              + ")");
      return null;
    }
  }

  public ErrorCode configSupplyCurrentLimit(SupplyCurrentLimitConfiguration currLimitConfigs) {
    if (Robot.isReal()) {
      return thisTalon.configSupplyCurrentLimit(currLimitConfigs);
    } else {
      mLogger.verbose(
          deviceNumber + ": configSupplyCurrentLimit(" + String.valueOf(currLimitConfigs) + ")");
      return null;
    }
  }

  public ErrorCode configPeakCurrentLimit(int amps, int timeoutMs) {
    if (Robot.isReal()) {
      return thisTalon.configPeakCurrentLimit(amps, timeoutMs);
    } else {
      mLogger.verbose(
          deviceNumber
              + ": configPeakCurrentLimit("
              + String.valueOf(amps)
              + ", "
              + String.valueOf(timeoutMs)
              + ")");
      return null;
    }
  }

  public ErrorCode configPeakCurrentLimit(int amps) {
    if (Robot.isReal()) {
      return thisTalon.configPeakCurrentLimit(amps);
    } else {
      mLogger.verbose(deviceNumber + ": configPeakCurrentLimit(" + String.valueOf(amps) + ")");
      return null;
    }
  }

  public ErrorCode configPeakCurrentDuration(int milliseconds, int timeoutMs) {
    if (Robot.isReal()) {
      return thisTalon.configPeakCurrentDuration(milliseconds, timeoutMs);
    } else {
      mLogger.verbose(
          deviceNumber
              + ": configPeakCurrentDuration("
              + String.valueOf(milliseconds)
              + ", "
              + String.valueOf(timeoutMs)
              + ")");
      return null;
    }
  }

  public ErrorCode configPeakCurrentDuration(int milliseconds) {
    if (Robot.isReal()) {
      return thisTalon.configPeakCurrentDuration(milliseconds);
    } else {
      mLogger.verbose(
          deviceNumber + ": configPeakCurrentDuration(" + String.valueOf(milliseconds) + ")");
      return null;
    }
  }

  public ErrorCode configContinuousCurrentLimit(int amps, int timeoutMs) {
    if (Robot.isReal()) {
      return thisTalon.configContinuousCurrentLimit(amps, timeoutMs);
    } else {
      mLogger.verbose(
          deviceNumber
              + ": configContinuousCurrentLimit("
              + String.valueOf(amps)
              + ", "
              + String.valueOf(timeoutMs)
              + ")");
      return null;
    }
  }

  public ErrorCode configContinuousCurrentLimit(int amps) {
    if (Robot.isReal()) {
      return thisTalon.configContinuousCurrentLimit(amps);
    } else {
      mLogger.verbose(
          deviceNumber + ": configContinuousCurrentLimit(" + String.valueOf(amps) + ")");
      return null;
    }
  }

  public void enableCurrentLimit(boolean enable) {
    if (Robot.isReal()) {
      thisTalon.enableCurrentLimit(enable);
    } else {
      mLogger.verbose(deviceNumber + ": enableCurrentLimit(" + String.valueOf(enable) + ")");
    }
  }

  public void getPIDConfigs(TalonSRXPIDSetConfiguration pid, int pidIdx, int timeoutMs) {
    if (Robot.isReal()) {
      thisTalon.getPIDConfigs(pid, pidIdx, timeoutMs);
    } else {
      mLogger.verbose(
          deviceNumber
              + ": getPIDConfigs("
              + String.valueOf(pid)
              + ", "
              + String.valueOf(pidIdx)
              + ", "
              + String.valueOf(timeoutMs)
              + ")");
    }
  }

  public void getPIDConfigs(TalonSRXPIDSetConfiguration pid) {
    if (Robot.isReal()) {
      thisTalon.getPIDConfigs(pid);
    } else {
      mLogger.verbose(deviceNumber + ": getPIDConfigs(" + String.valueOf(pid) + ")");
    }
  }

  public ErrorCode configAllSettings(TalonSRXConfiguration allConfigs, int timeoutMs) {
    if (Robot.isReal()) {
      return thisTalon.configAllSettings(allConfigs, timeoutMs);
    } else {
      mLogger.verbose(
          deviceNumber
              + ": configAllSettings("
              + String.valueOf(allConfigs)
              + ", "
              + String.valueOf(timeoutMs)
              + ")");
      return null;
    }
  }

  public ErrorCode configAllSettings(TalonSRXConfiguration allConfigs) {
    if (Robot.isReal()) {
      return thisTalon.configAllSettings(allConfigs);
    } else {
      mLogger.verbose(deviceNumber + ": configAllSettings(" + String.valueOf(allConfigs) + ")");
      return null;
    }
  }

  public void getAllConfigs(TalonSRXConfiguration allConfigs, int timeoutMs) {
    if (Robot.isReal()) {
      thisTalon.getAllConfigs(allConfigs, timeoutMs);
    } else {
      mLogger.verbose(
          deviceNumber
              + ": getAllConfigs("
              + String.valueOf(allConfigs)
              + ", "
              + String.valueOf(timeoutMs)
              + ")");
    }
  }

  public void getAllConfigs(TalonSRXConfiguration allConfigs) {
    if (Robot.isReal()) {
      thisTalon.getAllConfigs(allConfigs);
    } else {
      mLogger.verbose(deviceNumber + ": getAllConfigs(" + String.valueOf(allConfigs) + ")");
    }
  }

  public ErrorCode setStatusFramePeriod(StatusFrameEnhanced frame, int periodMs, int timeoutMs) {
    if (Robot.isReal()) {
      return thisTalon.setStatusFramePeriod(frame, periodMs, timeoutMs);
    } else {
      mLogger.verbose(
          deviceNumber
              + ": setStatusFramePeriod("
              + String.valueOf(frame)
              + ", "
              + String.valueOf(periodMs)
              + ", "
              + String.valueOf(timeoutMs)
              + ")");
      return null;
    }
  }

  public ErrorCode setStatusFramePeriod(StatusFrameEnhanced frame, int periodMs) {
    if (Robot.isReal()) {
      return thisTalon.setStatusFramePeriod(frame, periodMs);
    } else {
      mLogger.verbose(
          deviceNumber
              + ": setStatusFramePeriod("
              + String.valueOf(frame)
              + ", "
              + String.valueOf(periodMs)
              + ")");
      return null;
    }
  }

  public int getStatusFramePeriod(StatusFrameEnhanced frame, int timeoutMs) {
    if (Robot.isReal()) {
      return thisTalon.getStatusFramePeriod(frame, timeoutMs);
    } else {
      mLogger.verbose(
          deviceNumber
              + ": getStatusFramePeriod("
              + String.valueOf(frame)
              + ", "
              + String.valueOf(timeoutMs)
              + ")");
      return 0;
    }
  }

  public int getStatusFramePeriod(StatusFrameEnhanced frame) {
    if (Robot.isReal()) {
      return thisTalon.getStatusFramePeriod(frame);
    } else {
      mLogger.verbose(deviceNumber + ": getStatusFramePeriod(" + String.valueOf(frame) + ")");
      return 0;
    }
  }

  public double getOutputCurrent() {
    if (Robot.isReal()) {
      return thisTalon.getOutputCurrent();
    } else {
      mLogger.verbose(deviceNumber + ": getOutputCurrent()");
      return 0;
    }
  }

  public double getStatorCurrent() {
    if (Robot.isReal()) {
      return thisTalon.getStatorCurrent();
    } else {
      mLogger.verbose(deviceNumber + ": getStatorCurrent()");
      return 0;
    }
  }

  public double getSupplyCurrent() {
    if (Robot.isReal()) {
      return thisTalon.getSupplyCurrent();
    } else {
      mLogger.verbose(deviceNumber + ": getSupplyCurrent()");
      return 0;
    }
  }

  public ErrorCode configVelocityMeasurementPeriod(VelocityMeasPeriod period, int timeoutMs) {
    if (Robot.isReal()) {
      return thisTalon.configVelocityMeasurementPeriod(period, timeoutMs);
    } else {
      mLogger.verbose(
          deviceNumber
              + ": configVelocityMeasurementPeriod("
              + String.valueOf(period)
              + ", "
              + String.valueOf(timeoutMs)
              + ")");
      return null;
    }
  }

  public ErrorCode configVelocityMeasurementPeriod(VelocityMeasPeriod period) {
    if (Robot.isReal()) {
      return thisTalon.configVelocityMeasurementPeriod(period);
    } else {
      mLogger.verbose(
          deviceNumber + ": configVelocityMeasurementPeriod(" + String.valueOf(period) + ")");
      return null;
    }
  }

  public ErrorCode configVelocityMeasurementWindow(int windowSize, int timeoutMs) {
    if (Robot.isReal()) {
      return thisTalon.configVelocityMeasurementWindow(windowSize, timeoutMs);
    } else {
      mLogger.verbose(
          deviceNumber
              + ": configVelocityMeasurementWindow("
              + String.valueOf(windowSize)
              + ", "
              + String.valueOf(timeoutMs)
              + ")");
      return null;
    }
  }

  public ErrorCode configVelocityMeasurementWindow(int windowSize) {
    if (Robot.isReal()) {
      return thisTalon.configVelocityMeasurementWindow(windowSize);
    } else {
      mLogger.verbose(
          deviceNumber + ": configVelocityMeasurementWindow(" + String.valueOf(windowSize) + ")");
      return null;
    }
  }

  public ErrorCode configForwardLimitSwitchSource(
      LimitSwitchSource type, LimitSwitchNormal normalOpenOrClose, int timeoutMs) {
    if (Robot.isReal()) {
      return thisTalon.configForwardLimitSwitchSource(type, normalOpenOrClose, timeoutMs);
    } else {
      mLogger.verbose(
          deviceNumber
              + ": configForwardLimitSwitchSource("
              + String.valueOf(type)
              + ", "
              + String.valueOf(normalOpenOrClose)
              + ", "
              + String.valueOf(timeoutMs)
              + ")");
      return null;
    }
  }

  public ErrorCode configForwardLimitSwitchSource(
      LimitSwitchSource type, LimitSwitchNormal normalOpenOrClose) {
    if (Robot.isReal()) {
      return thisTalon.configForwardLimitSwitchSource(type, normalOpenOrClose);
    } else {
      mLogger.verbose(
          deviceNumber
              + ": configForwardLimitSwitchSource("
              + String.valueOf(type)
              + ", "
              + String.valueOf(normalOpenOrClose)
              + ")");
      return null;
    }
  }

  public ErrorCode configReverseLimitSwitchSource(
      LimitSwitchSource type, LimitSwitchNormal normalOpenOrClose, int timeoutMs) {
    if (Robot.isReal()) {
      return thisTalon.configReverseLimitSwitchSource(type, normalOpenOrClose, timeoutMs);
    } else {
      mLogger.verbose(
          deviceNumber
              + ": configReverseLimitSwitchSource("
              + String.valueOf(type)
              + ", "
              + String.valueOf(normalOpenOrClose)
              + ", "
              + String.valueOf(timeoutMs)
              + ")");
      return null;
    }
  }

  public ErrorCode configReverseLimitSwitchSource(
      LimitSwitchSource type, LimitSwitchNormal normalOpenOrClose) {
    if (Robot.isReal()) {
      return thisTalon.configReverseLimitSwitchSource(type, normalOpenOrClose);
    } else {
      mLogger.verbose(
          deviceNumber
              + ": configReverseLimitSwitchSource("
              + String.valueOf(type)
              + ", "
              + String.valueOf(normalOpenOrClose)
              + ")");
      return null;
    }
  }

  public int isFwdLimitSwitchClosed() {
    if (Robot.isReal()) {
      return thisTalon.isFwdLimitSwitchClosed();
    } else {
      mLogger.verbose(deviceNumber + ": isFwdLimitSwitchClosed()");
      return 0;
    }
  }

  public int isRevLimitSwitchClosed() {
    if (Robot.isReal()) {
      return thisTalon.isRevLimitSwitchClosed();
    } else {
      mLogger.verbose(deviceNumber + ": isRevLimitSwitchClosed()");
      return 0;
    }
  }

  public ErrorCode DestroyObject() {
    if (Robot.isReal()) {
      return thisTalon.DestroyObject();
    } else {
      mLogger.verbose(deviceNumber + ": DestroyObject()");
      return null;
    }
  }

  public long getHandle() {
    if (Robot.isReal()) {
      return thisTalon.getHandle();
    } else {
      mLogger.verbose(deviceNumber + ": getHandle()");
      return 0;
    }
  }

  public int getDeviceID() {
    if (Robot.isReal()) {
      return thisTalon.getDeviceID();
    } else {
      mLogger.verbose(deviceNumber + ": getDeviceID()");
      return 0;
    }
  }

  public void neutralOutput() {
    if (Robot.isReal()) {
      thisTalon.neutralOutput();
    } else {
      mLogger.verbose(deviceNumber + ": neutralOutput()");
    }
  }

  public void setNeutralMode(NeutralMode neutralMode) {
    if (Robot.isReal()) {
      thisTalon.setNeutralMode(neutralMode);
    } else {
      mLogger.verbose(deviceNumber + ": setNeutralMode(" + String.valueOf(neutralMode) + ")");
    }
  }

  //TODO: Fix
  /*
  public void enableHeadingHold(boolean enable) {
    if (Robot.isReal()) {
      thisTalon.enableHeadingHold(enable);
    } else {
      mLogger.verbose(deviceNumber + ": enableHeadingHold(" + String.valueOf(enable) + ")");
    }
  }
  */

  //TODO: Fix
  /*
  public void selectDemandType(boolean value) {
    if (Robot.isReal()) {
      thisTalon.selectDemandType(value);
    } else {
      mLogger.verbose(deviceNumber + ": selectDemandType(" + String.valueOf(value) + ")");
    }
  }
  */

  public void setSensorPhase(boolean PhaseSensor) {
    if (Robot.isReal()) {
      thisTalon.setSensorPhase(PhaseSensor);
    } else {
      mLogger.verbose(deviceNumber + ": setSensorPhase(" + String.valueOf(PhaseSensor) + ")");
    }
  }

  public void setInverted(InvertType invertType) {
    if (Robot.isReal()) {
      thisTalon.setInverted(invertType);
    } else {
      mLogger.verbose(deviceNumber + ": setInverted(" + String.valueOf(invertType) + ")");
    }
  }

  public ErrorCode configFactoryDefault(int timeoutMs) {
    if (Robot.isReal()) {
      return thisTalon.configFactoryDefault(timeoutMs);
    } else {
      mLogger.verbose(deviceNumber + ": configFactoryDefault(" + String.valueOf(timeoutMs) + ")");
      return null;
    }
  }

  public ErrorCode configFactoryDefault() {
    if (Robot.isReal()) {
      return thisTalon.configFactoryDefault();
    } else {
      mLogger.verbose(deviceNumber + ": configFactoryDefault()");
      return null;
    }
  }

  public ErrorCode configOpenloopRamp(double secondsFromNeutralToFull, int timeoutMs) {
    if (Robot.isReal()) {
      return thisTalon.configOpenloopRamp(secondsFromNeutralToFull, timeoutMs);
    } else {
      mLogger.verbose(
          deviceNumber
              + ": configOpenloopRamp("
              + String.valueOf(secondsFromNeutralToFull)
              + ", "
              + String.valueOf(timeoutMs)
              + ")");
      return null;
    }
  }

  public ErrorCode configOpenloopRamp(double secondsFromNeutralToFull) {
    if (Robot.isReal()) {
      return thisTalon.configOpenloopRamp(secondsFromNeutralToFull);
    } else {
      mLogger.verbose(
          deviceNumber + ": configOpenloopRamp(" + String.valueOf(secondsFromNeutralToFull) + ")");
      return null;
    }
  }

  public ErrorCode configClosedloopRamp(double secondsFromNeutralToFull, int timeoutMs) {
    if (Robot.isReal()) {
      return thisTalon.configClosedloopRamp(secondsFromNeutralToFull, timeoutMs);
    } else {
      mLogger.verbose(
          deviceNumber
              + ": configClosedloopRamp("
              + String.valueOf(secondsFromNeutralToFull)
              + ", "
              + String.valueOf(timeoutMs)
              + ")");
      return null;
    }
  }

  public ErrorCode configClosedloopRamp(double secondsFromNeutralToFull) {
    if (Robot.isReal()) {
      return thisTalon.configClosedloopRamp(secondsFromNeutralToFull);
    } else {
      mLogger.verbose(
          deviceNumber
              + ": configClosedloopRamp("
              + String.valueOf(secondsFromNeutralToFull)
              + ")");
      return null;
    }
  }

  public ErrorCode configPeakOutputForward(double percentOut, int timeoutMs) {
    if (Robot.isReal()) {
      return thisTalon.configPeakOutputForward(percentOut, timeoutMs);
    } else {
      mLogger.verbose(
          deviceNumber
              + ": configPeakOutputForward("
              + String.valueOf(percentOut)
              + ", "
              + String.valueOf(timeoutMs)
              + ")");
      return null;
    }
  }

  public ErrorCode configPeakOutputForward(double percentOut) {
    if (Robot.isReal()) {
      return thisTalon.configPeakOutputForward(percentOut);
    } else {
      mLogger.verbose(
          deviceNumber + ": configPeakOutputForward(" + String.valueOf(percentOut) + ")");
      return null;
    }
  }

  public ErrorCode configPeakOutputReverse(double percentOut, int timeoutMs) {
    if (Robot.isReal()) {
      return thisTalon.configPeakOutputReverse(percentOut, timeoutMs);
    } else {
      mLogger.verbose(
          deviceNumber
              + ": configPeakOutputReverse("
              + String.valueOf(percentOut)
              + ", "
              + String.valueOf(timeoutMs)
              + ")");
      return null;
    }
  }

  public ErrorCode configPeakOutputReverse(double percentOut) {
    if (Robot.isReal()) {
      return thisTalon.configPeakOutputReverse(percentOut);
    } else {
      mLogger.verbose(
          deviceNumber + ": configPeakOutputReverse(" + String.valueOf(percentOut) + ")");
      return null;
    }
  }

  public ErrorCode configNominalOutputForward(double percentOut, int timeoutMs) {
    if (Robot.isReal()) {
      return thisTalon.configNominalOutputForward(percentOut, timeoutMs);
    } else {
      mLogger.verbose(
          deviceNumber
              + ": configNominalOutputForward("
              + String.valueOf(percentOut)
              + ", "
              + String.valueOf(timeoutMs)
              + ")");
      return null;
    }
  }

  public ErrorCode configNominalOutputForward(double percentOut) {
    if (Robot.isReal()) {
      return thisTalon.configNominalOutputForward(percentOut);
    } else {
      mLogger.verbose(
          deviceNumber + ": configNominalOutputForward(" + String.valueOf(percentOut) + ")");
      return null;
    }
  }

  public ErrorCode configNominalOutputReverse(double percentOut, int timeoutMs) {
    if (Robot.isReal()) {
      return thisTalon.configNominalOutputReverse(percentOut, timeoutMs);
    } else {
      mLogger.verbose(
          deviceNumber
              + ": configNominalOutputReverse("
              + String.valueOf(percentOut)
              + ", "
              + String.valueOf(timeoutMs)
              + ")");
      return null;
    }
  }

  public ErrorCode configNominalOutputReverse(double percentOut) {
    if (Robot.isReal()) {
      return thisTalon.configNominalOutputReverse(percentOut);
    } else {
      mLogger.verbose(
          deviceNumber + ": configNominalOutputReverse(" + String.valueOf(percentOut) + ")");
      return null;
    }
  }

  public ErrorCode configNeutralDeadband(double percentDeadband, int timeoutMs) {
    if (Robot.isReal()) {
      return thisTalon.configNeutralDeadband(percentDeadband, timeoutMs);
    } else {
      mLogger.verbose(
          deviceNumber
              + ": configNeutralDeadband("
              + String.valueOf(percentDeadband)
              + ", "
              + String.valueOf(timeoutMs)
              + ")");
      return null;
    }
  }

  public ErrorCode configNeutralDeadband(double percentDeadband) {
    if (Robot.isReal()) {
      return thisTalon.configNeutralDeadband(percentDeadband);
    } else {
      mLogger.verbose(
          deviceNumber + ": configNeutralDeadband(" + String.valueOf(percentDeadband) + ")");
      return null;
    }
  }

  public ErrorCode configVoltageCompSaturation(double voltage, int timeoutMs) {
    if (Robot.isReal()) {
      return thisTalon.configVoltageCompSaturation(voltage, timeoutMs);
    } else {
      mLogger.verbose(
          deviceNumber
              + ": configVoltageCompSaturation("
              + String.valueOf(voltage)
              + ", "
              + String.valueOf(timeoutMs)
              + ")");
      return null;
    }
  }

  public ErrorCode configVoltageCompSaturation(double voltage) {
    if (Robot.isReal()) {
      return thisTalon.configVoltageCompSaturation(voltage);
    } else {
      mLogger.verbose(
          deviceNumber + ": configVoltageCompSaturation(" + String.valueOf(voltage) + ")");
      return null;
    }
  }

  public ErrorCode configVoltageMeasurementFilter(int filterWindowSamples, int timeoutMs) {
    if (Robot.isReal()) {
      return thisTalon.configVoltageMeasurementFilter(filterWindowSamples, timeoutMs);
    } else {
      mLogger.verbose(
          deviceNumber
              + ": configVoltageMeasurementFilter("
              + String.valueOf(filterWindowSamples)
              + ", "
              + String.valueOf(timeoutMs)
              + ")");
      return null;
    }
  }

  public ErrorCode configVoltageMeasurementFilter(int filterWindowSamples) {
    if (Robot.isReal()) {
      return thisTalon.configVoltageMeasurementFilter(filterWindowSamples);
    } else {
      mLogger.verbose(
          deviceNumber
              + ": configVoltageMeasurementFilter("
              + String.valueOf(filterWindowSamples)
              + ")");
      return null;
    }
  }

  public void enableVoltageCompensation(boolean enable) {
    if (Robot.isReal()) {
      thisTalon.enableVoltageCompensation(enable);
    } else {
      mLogger.verbose(deviceNumber + ": enableVoltageCompensation(" + String.valueOf(enable) + ")");
    }
  }

  public boolean isVoltageCompensationEnabled() {
    if (Robot.isReal()) {
      throw new RuntimeException("Not implemented!");
    } else {
      mLogger.verbose(deviceNumber + ": isVoltageCompensationEnabled()");
      return false;
    }
  }

  public double getBusVoltage() {
    if (Robot.isReal()) {
      return thisTalon.getBusVoltage();
    } else {
      mLogger.verbose(deviceNumber + ": getBusVoltage()");
      return 0;
    }
  }

  public double getMotorOutputPercent() {
    if (Robot.isReal()) {
      return thisTalon.getMotorOutputPercent();
    } else {
      mLogger.verbose(deviceNumber + ": getMotorOutputPercent()");
      return 0;
    }
  }

  public double getMotorOutputVoltage() {
    if (Robot.isReal()) {
      return thisTalon.getMotorOutputVoltage();
    } else {
      mLogger.verbose(deviceNumber + ": getMotorOutputVoltage()");
      return 0;
    }
  }

  public double getTemperature() {
    if (Robot.isReal()) {
      return thisTalon.getTemperature();
    } else {
      mLogger.verbose(deviceNumber + ": getTemperature()");
      return 0;
    }
  }

  public ErrorCode configSelectedFeedbackSensor(
      RemoteFeedbackDevice feedbackDevice, int pidIdx, int timeoutMs) {
    if (Robot.isReal()) {
      return thisTalon.configSelectedFeedbackSensor(feedbackDevice, pidIdx, timeoutMs);
    } else {
      mLogger.verbose(
          deviceNumber
              + ": configSelectedFeedbackSensor("
              + String.valueOf(feedbackDevice)
              + ", "
              + String.valueOf(pidIdx)
              + ", "
              + String.valueOf(timeoutMs)
              + ")");
      return null;
    }
  }

  public ErrorCode configSelectedFeedbackSensor(RemoteFeedbackDevice feedbackDevice) {
    if (Robot.isReal()) {
      return thisTalon.configSelectedFeedbackSensor(feedbackDevice);
    } else {
      mLogger.verbose(
          deviceNumber + ": configSelectedFeedbackSensor(" + String.valueOf(feedbackDevice) + ")");
      return null;
    }
  }

  public ErrorCode configSelectedFeedbackSensor(
      FeedbackDevice feedbackDevice, int pidIdx, int timeoutMs) {
    if (Robot.isReal()) {
      return thisTalon.configSelectedFeedbackSensor(feedbackDevice, pidIdx, timeoutMs);
    } else {
      mLogger.verbose(
          deviceNumber
              + ": configSelectedFeedbackSensor("
              + String.valueOf(feedbackDevice)
              + ", "
              + String.valueOf(pidIdx)
              + ", "
              + String.valueOf(timeoutMs)
              + ")");
      return null;
    }
  }

  public ErrorCode configSelectedFeedbackSensor(FeedbackDevice feedbackDevice) {
    if (Robot.isReal()) {
      return thisTalon.configSelectedFeedbackSensor(feedbackDevice);
    } else {
      mLogger.verbose(
          deviceNumber + ": configSelectedFeedbackSensor(" + String.valueOf(feedbackDevice) + ")");
      return null;
    }
  }

  public ErrorCode configSelectedFeedbackCoefficient(
      double coefficient, int pidIdx, int timeoutMs) {
    if (Robot.isReal()) {
      return thisTalon.configSelectedFeedbackCoefficient(coefficient, pidIdx, timeoutMs);
    } else {
      mLogger.verbose(
          deviceNumber
              + ": configSelectedFeedbackCoefficient("
              + String.valueOf(coefficient)
              + ", "
              + String.valueOf(pidIdx)
              + ", "
              + String.valueOf(timeoutMs)
              + ")");
      return null;
    }
  }

  public ErrorCode configSelectedFeedbackCoefficient(double coefficient) {
    if (Robot.isReal()) {
      return thisTalon.configSelectedFeedbackCoefficient(coefficient);
    } else {
      mLogger.verbose(
          deviceNumber
              + ": configSelectedFeedbackCoefficient("
              + String.valueOf(coefficient)
              + ")");
      return null;
    }
  }

  public ErrorCode configRemoteFeedbackFilter(
      int deviceID, RemoteSensorSource remoteSensorSource, int remoteOrdinal, int timeoutMs) {
    if (Robot.isReal()) {
      return thisTalon.configRemoteFeedbackFilter(
          deviceID, remoteSensorSource, remoteOrdinal, timeoutMs);
    } else {
      mLogger.verbose(
          deviceNumber
              + ": configRemoteFeedbackFilter("
              + String.valueOf(deviceID)
              + ", "
              + String.valueOf(remoteSensorSource)
              + ", "
              + String.valueOf(remoteOrdinal)
              + ", "
              + String.valueOf(timeoutMs)
              + ")");
      return null;
    }
  }

  public ErrorCode configRemoteFeedbackFilter(
      int deviceID, RemoteSensorSource remoteSensorSource, int remoteOrdinal) {
    if (Robot.isReal()) {
      return thisTalon.configRemoteFeedbackFilter(deviceID, remoteSensorSource, remoteOrdinal);
    } else {
      mLogger.verbose(
          deviceNumber
              + ": configRemoteFeedbackFilter("
              + String.valueOf(deviceID)
              + ", "
              + String.valueOf(remoteSensorSource)
              + ", "
              + String.valueOf(remoteOrdinal)
              + ")");
      return null;
    }
  }

  public ErrorCode configRemoteFeedbackFilter(
      CANCoder canCoderRef, int remoteOrdinal, int timeoutMs) {
    if (Robot.isReal()) {
      throw new RuntimeException("Not implemented!");
    } else {
      mLogger.verbose(
          deviceNumber
              + ": configRemoteFeedbackFilter("
              + String.valueOf(canCoderRef)
              + ", "
              + String.valueOf(remoteOrdinal)
              + ", "
              + String.valueOf(timeoutMs)
              + ")");
      return null;
    }
  }

  public ErrorCode configRemoteFeedbackFilter(CANCoder canCoderRef, int remoteOrdinal) {
    if (Robot.isReal()) {
      throw new RuntimeException("Not implemented!");
    } else {
      mLogger.verbose(
          deviceNumber
              + ": configRemoteFeedbackFilter("
              + String.valueOf(canCoderRef)
              + ", "
              + String.valueOf(remoteOrdinal)
              + ")");
      return null;
    }
  }

  public ErrorCode configSensorTerm(
      SensorTerm sensorTerm, FeedbackDevice feedbackDevice, int timeoutMs) {
    if (Robot.isReal()) {
      return thisTalon.configSensorTerm(sensorTerm, feedbackDevice, timeoutMs);
    } else {
      mLogger.verbose(
          deviceNumber
              + ": configSensorTerm("
              + String.valueOf(sensorTerm)
              + ", "
              + String.valueOf(feedbackDevice)
              + ", "
              + String.valueOf(timeoutMs)
              + ")");
      return null;
    }
  }

  public ErrorCode configSensorTerm(SensorTerm sensorTerm, FeedbackDevice feedbackDevice) {
    if (Robot.isReal()) {
      return thisTalon.configSensorTerm(sensorTerm, feedbackDevice);
    } else {
      mLogger.verbose(
          deviceNumber
              + ": configSensorTerm("
              + String.valueOf(sensorTerm)
              + ", "
              + String.valueOf(feedbackDevice)
              + ")");
      return null;
    }
  }

  public ErrorCode configSensorTerm(
      SensorTerm sensorTerm, RemoteFeedbackDevice feedbackDevice, int timeoutMs) {
    if (Robot.isReal()) {
      return thisTalon.configSensorTerm(sensorTerm, feedbackDevice, timeoutMs);
    } else {
      mLogger.verbose(
          deviceNumber
              + ": configSensorTerm("
              + String.valueOf(sensorTerm)
              + ", "
              + String.valueOf(feedbackDevice)
              + ", "
              + String.valueOf(timeoutMs)
              + ")");
      return null;
    }
  }

  public ErrorCode configSensorTerm(SensorTerm sensorTerm, RemoteFeedbackDevice feedbackDevice) {
    if (Robot.isReal()) {
      return thisTalon.configSensorTerm(sensorTerm, feedbackDevice);
    } else {
      mLogger.verbose(
          deviceNumber
              + ": configSensorTerm("
              + String.valueOf(sensorTerm)
              + ", "
              + String.valueOf(feedbackDevice)
              + ")");
      return null;
    }
  }

  public double getSelectedSensorPosition(int pidIdx) {
    if (Robot.isReal()) {
      return thisTalon.getSelectedSensorPosition(pidIdx);
    } else {
      mLogger.verbose(deviceNumber + ": getSelectedSensorPosition(" + String.valueOf(pidIdx) + ")");
      return 0;
    }
  }

  public double getSelectedSensorPosition() {
    if (Robot.isReal()) {
      return thisTalon.getSelectedSensorPosition();
    } else {
      mLogger.verbose(deviceNumber + ": getSelectedSensorPosition()");
      return 0;
    }
  }

  public double getSelectedSensorVelocity(int pidIdx) {
    if (Robot.isReal()) {
      return thisTalon.getSelectedSensorVelocity(pidIdx);
    } else {
      mLogger.verbose(deviceNumber + ": getSelectedSensorVelocity(" + String.valueOf(pidIdx) + ")");
      return 0;
    }
  }

  public double getSelectedSensorVelocity() {
    if (Robot.isReal()) {
      return thisTalon.getSelectedSensorVelocity();
    } else {
      mLogger.verbose(deviceNumber + ": getSelectedSensorVelocity()");
      return 0;
    }
  }

  public ErrorCode setSelectedSensorPosition(double sensorPos, int pidIdx, int timeoutMs) {
    if (Robot.isReal()) {
      return thisTalon.setSelectedSensorPosition(sensorPos, pidIdx, timeoutMs);
    } else {
      mLogger.verbose(
          deviceNumber
              + ": setSelectedSensorPosition("
              + String.valueOf(sensorPos)
              + ", "
              + String.valueOf(pidIdx)
              + ", "
              + String.valueOf(timeoutMs)
              + ")");
      return null;
    }
  }

  public ErrorCode setSelectedSensorPosition(int sensorPos) {
    if (Robot.isReal()) {
      return thisTalon.setSelectedSensorPosition(sensorPos);
    } else {
      mLogger.verbose(
          deviceNumber + ": setSelectedSensorPosition(" + String.valueOf(sensorPos) + ")");
      return null;
    }
  }

  public ErrorCode setControlFramePeriod(ControlFrame frame, int periodMs) {
    if (Robot.isReal()) {
      return thisTalon.setControlFramePeriod(frame, periodMs);
    } else {
      mLogger.verbose(
          deviceNumber
              + ": setControlFramePeriod("
              + String.valueOf(frame)
              + ", "
              + String.valueOf(periodMs)
              + ")");
      return null;
    }
  }

  public ErrorCode setControlFramePeriod(int frame, int periodMs) {
    if (Robot.isReal()) {
      return thisTalon.setControlFramePeriod(frame, periodMs);
    } else {
      mLogger.verbose(
          deviceNumber
              + ": setControlFramePeriod("
              + String.valueOf(frame)
              + ", "
              + String.valueOf(periodMs)
              + ")");
      return null;
    }
  }

  public ErrorCode setStatusFramePeriod(int frameValue, int periodMs, int timeoutMs) {
    if (Robot.isReal()) {
      return thisTalon.setStatusFramePeriod(frameValue, periodMs, timeoutMs);
    } else {
      mLogger.verbose(
          deviceNumber
              + ": setStatusFramePeriod("
              + String.valueOf(frameValue)
              + ", "
              + String.valueOf(periodMs)
              + ", "
              + String.valueOf(timeoutMs)
              + ")");
      return null;
    }
  }

  public ErrorCode setStatusFramePeriod(int frameValue, int periodMs) {
    if (Robot.isReal()) {
      return thisTalon.setStatusFramePeriod(frameValue, periodMs);
    } else {
      mLogger.verbose(
          deviceNumber
              + ": setStatusFramePeriod("
              + String.valueOf(frameValue)
              + ", "
              + String.valueOf(periodMs)
              + ")");
      return null;
    }
  }

  public ErrorCode setStatusFramePeriod(StatusFrame frame, int periodMs, int timeoutMs) {
    if (Robot.isReal()) {
      return thisTalon.setStatusFramePeriod(frame, periodMs, timeoutMs);
    } else {
      mLogger.verbose(
          deviceNumber
              + ": setStatusFramePeriod("
              + String.valueOf(frame)
              + ", "
              + String.valueOf(periodMs)
              + ", "
              + String.valueOf(timeoutMs)
              + ")");
      return null;
    }
  }

  public ErrorCode setStatusFramePeriod(StatusFrame frame, int periodMs) {
    if (Robot.isReal()) {
      return thisTalon.setStatusFramePeriod(frame, periodMs);
    } else {
      mLogger.verbose(
          deviceNumber
              + ": setStatusFramePeriod("
              + String.valueOf(frame)
              + ", "
              + String.valueOf(periodMs)
              + ")");
      return null;
    }
  }

  public int getStatusFramePeriod(int frame, int timeoutMs) {
    if (Robot.isReal()) {
      return thisTalon.getStatusFramePeriod(frame, timeoutMs);
    } else {
      mLogger.verbose(
          deviceNumber
              + ": getStatusFramePeriod("
              + String.valueOf(frame)
              + ", "
              + String.valueOf(timeoutMs)
              + ")");
      return 0;
    }
  }

  public int getStatusFramePeriod(int frame) {
    if (Robot.isReal()) {
      return thisTalon.getStatusFramePeriod(frame);
    } else {
      mLogger.verbose(deviceNumber + ": getStatusFramePeriod(" + String.valueOf(frame) + ")");
      return 0;
    }
  }

  public int getStatusFramePeriod(StatusFrame frame, int timeoutMs) {
    if (Robot.isReal()) {
      return thisTalon.getStatusFramePeriod(frame, timeoutMs);
    } else {
      mLogger.verbose(
          deviceNumber
              + ": getStatusFramePeriod("
              + String.valueOf(frame)
              + ", "
              + String.valueOf(timeoutMs)
              + ")");
      return 0;
    }
  }

  public int getStatusFramePeriod(StatusFrame frame) {
    if (Robot.isReal()) {
      return thisTalon.getStatusFramePeriod(frame);
    } else {
      mLogger.verbose(deviceNumber + ": getStatusFramePeriod(" + String.valueOf(frame) + ")");
      return 0;
    }
  }

  public ErrorCode configForwardLimitSwitchSource(
      RemoteLimitSwitchSource type,
      LimitSwitchNormal normalOpenOrClose,
      int deviceID,
      int timeoutMs) {
    if (Robot.isReal()) {
      return thisTalon.configForwardLimitSwitchSource(type, normalOpenOrClose, deviceID, timeoutMs);
    } else {
      mLogger.verbose(
          deviceNumber
              + ": configForwardLimitSwitchSource("
              + String.valueOf(type)
              + ", "
              + String.valueOf(normalOpenOrClose)
              + ", "
              + String.valueOf(deviceID)
              + ", "
              + String.valueOf(timeoutMs)
              + ")");
      return null;
    }
  }

  public ErrorCode configForwardLimitSwitchSource(
      RemoteLimitSwitchSource type, LimitSwitchNormal normalOpenOrClose, int deviceID) {
    if (Robot.isReal()) {
      return thisTalon.configForwardLimitSwitchSource(type, normalOpenOrClose, deviceID);
    } else {
      mLogger.verbose(
          deviceNumber
              + ": configForwardLimitSwitchSource("
              + String.valueOf(type)
              + ", "
              + String.valueOf(normalOpenOrClose)
              + ", "
              + String.valueOf(deviceID)
              + ")");
      return null;
    }
  }

  public ErrorCode configReverseLimitSwitchSource(
      RemoteLimitSwitchSource type,
      LimitSwitchNormal normalOpenOrClose,
      int deviceID,
      int timeoutMs) {
    if (Robot.isReal()) {
      return thisTalon.configReverseLimitSwitchSource(type, normalOpenOrClose, deviceID, timeoutMs);
    } else {
      mLogger.verbose(
          deviceNumber
              + ": configReverseLimitSwitchSource("
              + String.valueOf(type)
              + ", "
              + String.valueOf(normalOpenOrClose)
              + ", "
              + String.valueOf(deviceID)
              + ", "
              + String.valueOf(timeoutMs)
              + ")");
      return null;
    }
  }

  public ErrorCode configReverseLimitSwitchSource(
      RemoteLimitSwitchSource type, LimitSwitchNormal normalOpenOrClose, int deviceID) {
    if (Robot.isReal()) {
      return thisTalon.configReverseLimitSwitchSource(type, normalOpenOrClose, deviceID);
    } else {
      mLogger.verbose(
          deviceNumber
              + ": configReverseLimitSwitchSource("
              + String.valueOf(type)
              + ", "
              + String.valueOf(normalOpenOrClose)
              + ", "
              + String.valueOf(deviceID)
              + ")");
      return null;
    }
  }

  public void overrideLimitSwitchesEnable(boolean enable) {
    if (Robot.isReal()) {
      thisTalon.overrideLimitSwitchesEnable(enable);
    } else {
      mLogger.verbose(
          deviceNumber + ": overrideLimitSwitchesEnable(" + String.valueOf(enable) + ")");
    }
  }

  public ErrorCode configForwardSoftLimitThreshold(double forwardSensorLimit, int timeoutMs) {
    if (Robot.isReal()) {
      return thisTalon.configForwardSoftLimitThreshold(forwardSensorLimit, timeoutMs);
    } else {
      mLogger.verbose(
          deviceNumber
              + ": configForwardSoftLimitThreshold("
              + String.valueOf(forwardSensorLimit)
              + ", "
              + String.valueOf(timeoutMs)
              + ")");
      return null;
    }
  }

  public ErrorCode configForwardSoftLimitThreshold(int forwardSensorLimit) {
    if (Robot.isReal()) {
      return thisTalon.configForwardSoftLimitThreshold(forwardSensorLimit);
    } else {
      mLogger.verbose(
          deviceNumber
              + ": configForwardSoftLimitThreshold("
              + String.valueOf(forwardSensorLimit)
              + ")");
      return null;
    }
  }

  public ErrorCode configReverseSoftLimitThreshold(double reverseSensorLimit, int timeoutMs) {
    if (Robot.isReal()) {
      return thisTalon.configReverseSoftLimitThreshold(reverseSensorLimit, timeoutMs);
    } else {
      mLogger.verbose(
          deviceNumber
              + ": configReverseSoftLimitThreshold("
              + String.valueOf(reverseSensorLimit)
              + ", "
              + String.valueOf(timeoutMs)
              + ")");
      return null;
    }
  }

  public ErrorCode configReverseSoftLimitThreshold(int reverseSensorLimit) {
    if (Robot.isReal()) {
      return thisTalon.configReverseSoftLimitThreshold(reverseSensorLimit);
    } else {
      mLogger.verbose(
          deviceNumber
              + ": configReverseSoftLimitThreshold("
              + String.valueOf(reverseSensorLimit)
              + ")");
      return null;
    }
  }

  public ErrorCode configForwardSoftLimitEnable(boolean enable, int timeoutMs) {
    if (Robot.isReal()) {
      return thisTalon.configForwardSoftLimitEnable(enable, timeoutMs);
    } else {
      mLogger.verbose(
          deviceNumber
              + ": configForwardSoftLimitEnable("
              + String.valueOf(enable)
              + ", "
              + String.valueOf(timeoutMs)
              + ")");
      return null;
    }
  }

  public ErrorCode configForwardSoftLimitEnable(boolean enable) {
    if (Robot.isReal()) {
      return thisTalon.configForwardSoftLimitEnable(enable);
    } else {
      mLogger.verbose(
          deviceNumber + ": configForwardSoftLimitEnable(" + String.valueOf(enable) + ")");
      return null;
    }
  }

  public ErrorCode configReverseSoftLimitEnable(boolean enable, int timeoutMs) {
    if (Robot.isReal()) {
      return thisTalon.configReverseSoftLimitEnable(enable, timeoutMs);
    } else {
      mLogger.verbose(
          deviceNumber
              + ": configReverseSoftLimitEnable("
              + String.valueOf(enable)
              + ", "
              + String.valueOf(timeoutMs)
              + ")");
      return null;
    }
  }

  public ErrorCode configReverseSoftLimitEnable(boolean enable) {
    if (Robot.isReal()) {
      return thisTalon.configReverseSoftLimitEnable(enable);
    } else {
      mLogger.verbose(
          deviceNumber + ": configReverseSoftLimitEnable(" + String.valueOf(enable) + ")");
      return null;
    }
  }

  public void overrideSoftLimitsEnable(boolean enable) {
    if (Robot.isReal()) {
      thisTalon.overrideSoftLimitsEnable(enable);
    } else {
      mLogger.verbose(deviceNumber + ": overrideSoftLimitsEnable(" + String.valueOf(enable) + ")");
    }
  }

  public ErrorCode config_kP(int slotIdx, double value, int timeoutMs) {
    if (Robot.isReal()) {
      return thisTalon.config_kP(slotIdx, value, timeoutMs);
    } else {
      mLogger.verbose(
          deviceNumber
              + ": config_kP("
              + String.valueOf(slotIdx)
              + ", "
              + String.valueOf(value)
              + ", "
              + String.valueOf(timeoutMs)
              + ")");
      return null;
    }
  }

  public ErrorCode config_kP(int slotIdx, double value) {
    if (Robot.isReal()) {
      return thisTalon.config_kP(slotIdx, value);
    } else {
      mLogger.verbose(
          deviceNumber
              + ": config_kP("
              + String.valueOf(slotIdx)
              + ", "
              + String.valueOf(value)
              + ")");
      return null;
    }
  }

  public ErrorCode config_kI(int slotIdx, double value, int timeoutMs) {
    if (Robot.isReal()) {
      return thisTalon.config_kI(slotIdx, value, timeoutMs);
    } else {
      mLogger.verbose(
          deviceNumber
              + ": config_kI("
              + String.valueOf(slotIdx)
              + ", "
              + String.valueOf(value)
              + ", "
              + String.valueOf(timeoutMs)
              + ")");
      return null;
    }
  }

  public ErrorCode config_kI(int slotIdx, double value) {
    if (Robot.isReal()) {
      return thisTalon.config_kI(slotIdx, value);
    } else {
      mLogger.verbose(
          deviceNumber
              + ": config_kI("
              + String.valueOf(slotIdx)
              + ", "
              + String.valueOf(value)
              + ")");
      return null;
    }
  }

  public ErrorCode config_kD(int slotIdx, double value, int timeoutMs) {
    if (Robot.isReal()) {
      return thisTalon.config_kD(slotIdx, value, timeoutMs);
    } else {
      mLogger.verbose(
          deviceNumber
              + ": config_kD("
              + String.valueOf(slotIdx)
              + ", "
              + String.valueOf(value)
              + ", "
              + String.valueOf(timeoutMs)
              + ")");
      return null;
    }
  }

  public ErrorCode config_kD(int slotIdx, double value) {
    if (Robot.isReal()) {
      return thisTalon.config_kD(slotIdx, value);
    } else {
      mLogger.verbose(
          deviceNumber
              + ": config_kD("
              + String.valueOf(slotIdx)
              + ", "
              + String.valueOf(value)
              + ")");
      return null;
    }
  }

  public ErrorCode config_kF(int slotIdx, double value, int timeoutMs) {
    if (Robot.isReal()) {
      return thisTalon.config_kF(slotIdx, value, timeoutMs);
    } else {
      mLogger.verbose(
          deviceNumber
              + ": config_kF("
              + String.valueOf(slotIdx)
              + ", "
              + String.valueOf(value)
              + ", "
              + String.valueOf(timeoutMs)
              + ")");
      return null;
    }
  }

  public ErrorCode config_kF(int slotIdx, double value) {
    if (Robot.isReal()) {
      return thisTalon.config_kF(slotIdx, value);
    } else {
      mLogger.verbose(
          deviceNumber
              + ": config_kF("
              + String.valueOf(slotIdx)
              + ", "
              + String.valueOf(value)
              + ")");
      return null;
    }
  }

  public ErrorCode config_IntegralZone(int slotIdx, double izone, int timeoutMs) {
    if (Robot.isReal()) {
      return thisTalon.config_IntegralZone(slotIdx, izone, timeoutMs);
    } else {
      mLogger.verbose(
          deviceNumber
              + ": config_IntegralZone("
              + String.valueOf(slotIdx)
              + ", "
              + String.valueOf(izone)
              + ", "
              + String.valueOf(timeoutMs)
              + ")");
      return null;
    }
  }

  public ErrorCode config_IntegralZone(int slotIdx, int izone) {
    if (Robot.isReal()) {
      return thisTalon.config_IntegralZone(slotIdx, izone);
    } else {
      mLogger.verbose(
          deviceNumber
              + ": config_IntegralZone("
              + String.valueOf(slotIdx)
              + ", "
              + String.valueOf(izone)
              + ")");
      return null;
    }
  }

  public ErrorCode configAllowableClosedloopError(
      int slotIdx, double allowableClosedLoopError, int timeoutMs) {
    if (Robot.isReal()) {
      return thisTalon.configAllowableClosedloopError(slotIdx, allowableClosedLoopError, timeoutMs);
    } else {
      mLogger.verbose(
          deviceNumber
              + ": configAllowableClosedloopError("
              + String.valueOf(slotIdx)
              + ", "
              + String.valueOf(allowableClosedLoopError)
              + ", "
              + String.valueOf(timeoutMs)
              + ")");
      return null;
    }
  }

  public ErrorCode configAllowableClosedloopError(int slotIdx, int allowableClosedLoopError) {
    if (Robot.isReal()) {
      return thisTalon.configAllowableClosedloopError(slotIdx, allowableClosedLoopError);
    } else {
      mLogger.verbose(
          deviceNumber
              + ": configAllowableClosedloopError("
              + String.valueOf(slotIdx)
              + ", "
              + String.valueOf(allowableClosedLoopError)
              + ")");
      return null;
    }
  }

  public ErrorCode configMaxIntegralAccumulator(int slotIdx, double iaccum, int timeoutMs) {
    if (Robot.isReal()) {
      return thisTalon.configMaxIntegralAccumulator(slotIdx, iaccum, timeoutMs);
    } else {
      mLogger.verbose(
          deviceNumber
              + ": configMaxIntegralAccumulator("
              + String.valueOf(slotIdx)
              + ", "
              + String.valueOf(iaccum)
              + ", "
              + String.valueOf(timeoutMs)
              + ")");
      return null;
    }
  }

  public ErrorCode configMaxIntegralAccumulator(int slotIdx, double iaccum) {
    if (Robot.isReal()) {
      return thisTalon.configMaxIntegralAccumulator(slotIdx, iaccum);
    } else {
      mLogger.verbose(
          deviceNumber
              + ": configMaxIntegralAccumulator("
              + String.valueOf(slotIdx)
              + ", "
              + String.valueOf(iaccum)
              + ")");
      return null;
    }
  }

  public ErrorCode configClosedLoopPeakOutput(int slotIdx, double percentOut, int timeoutMs) {
    if (Robot.isReal()) {
      return thisTalon.configClosedLoopPeakOutput(slotIdx, percentOut, timeoutMs);
    } else {
      mLogger.verbose(
          deviceNumber
              + ": configClosedLoopPeakOutput("
              + String.valueOf(slotIdx)
              + ", "
              + String.valueOf(percentOut)
              + ", "
              + String.valueOf(timeoutMs)
              + ")");
      return null;
    }
  }

  public ErrorCode configClosedLoopPeakOutput(int slotIdx, double percentOut) {
    if (Robot.isReal()) {
      return thisTalon.configClosedLoopPeakOutput(slotIdx, percentOut);
    } else {
      mLogger.verbose(
          deviceNumber
              + ": configClosedLoopPeakOutput("
              + String.valueOf(slotIdx)
              + ", "
              + String.valueOf(percentOut)
              + ")");
      return null;
    }
  }

  public ErrorCode configClosedLoopPeriod(int slotIdx, int loopTimeMs, int timeoutMs) {
    if (Robot.isReal()) {
      return thisTalon.configClosedLoopPeriod(slotIdx, loopTimeMs, timeoutMs);
    } else {
      mLogger.verbose(
          deviceNumber
              + ": configClosedLoopPeriod("
              + String.valueOf(slotIdx)
              + ", "
              + String.valueOf(loopTimeMs)
              + ", "
              + String.valueOf(timeoutMs)
              + ")");
      return null;
    }
  }

  public ErrorCode configClosedLoopPeriod(int slotIdx, int loopTimeMs) {
    if (Robot.isReal()) {
      return thisTalon.configClosedLoopPeriod(slotIdx, loopTimeMs);
    } else {
      mLogger.verbose(
          deviceNumber
              + ": configClosedLoopPeriod("
              + String.valueOf(slotIdx)
              + ", "
              + String.valueOf(loopTimeMs)
              + ")");
      return null;
    }
  }

  public ErrorCode configAuxPIDPolarity(boolean invert, int timeoutMs) {
    if (Robot.isReal()) {
      return thisTalon.configAuxPIDPolarity(invert, timeoutMs);
    } else {
      mLogger.verbose(
          deviceNumber
              + ": configAuxPIDPolarity("
              + String.valueOf(invert)
              + ", "
              + String.valueOf(timeoutMs)
              + ")");
      return null;
    }
  }

  public ErrorCode configAuxPIDPolarity(boolean invert) {
    if (Robot.isReal()) {
      return thisTalon.configAuxPIDPolarity(invert);
    } else {
      mLogger.verbose(deviceNumber + ": configAuxPIDPolarity(" + String.valueOf(invert) + ")");
      return null;
    }
  }

  public ErrorCode setIntegralAccumulator(double iaccum, int pidIdx, int timeoutMs) {
    if (Robot.isReal()) {
      return thisTalon.setIntegralAccumulator(iaccum, pidIdx, timeoutMs);
    } else {
      mLogger.verbose(
          deviceNumber
              + ": setIntegralAccumulator("
              + String.valueOf(iaccum)
              + ", "
              + String.valueOf(pidIdx)
              + ", "
              + String.valueOf(timeoutMs)
              + ")");
      return null;
    }
  }

  public ErrorCode setIntegralAccumulator(double iaccum) {
    if (Robot.isReal()) {
      return thisTalon.setIntegralAccumulator(iaccum);
    } else {
      mLogger.verbose(deviceNumber + ": setIntegralAccumulator(" + String.valueOf(iaccum) + ")");
      return null;
    }
  }

  public double getClosedLoopError(int pidIdx) {
    if (Robot.isReal()) {
      return thisTalon.getClosedLoopError(pidIdx);
    } else {
      mLogger.verbose(deviceNumber + ": getClosedLoopError(" + String.valueOf(pidIdx) + ")");
      return 0;
    }
  }

  public double getClosedLoopError() {
    if (Robot.isReal()) {
      return thisTalon.getClosedLoopError();
    } else {
      mLogger.verbose(deviceNumber + ": getClosedLoopError()");
      return 0;
    }
  }

  public double getIntegralAccumulator(int pidIdx) {
    if (Robot.isReal()) {
      return thisTalon.getIntegralAccumulator(pidIdx);
    } else {
      mLogger.verbose(deviceNumber + ": getIntegralAccumulator(" + String.valueOf(pidIdx) + ")");
      return 0;
    }
  }

  public double getIntegralAccumulator() {
    if (Robot.isReal()) {
      return thisTalon.getIntegralAccumulator();
    } else {
      mLogger.verbose(deviceNumber + ": getIntegralAccumulator()");
      return 0;
    }
  }

  public double getErrorDerivative(int pidIdx) {
    if (Robot.isReal()) {
      return thisTalon.getErrorDerivative(pidIdx);
    } else {
      mLogger.verbose(deviceNumber + ": getErrorDerivative(" + String.valueOf(pidIdx) + ")");
      return 0;
    }
  }

  public double getErrorDerivative() {
    if (Robot.isReal()) {
      return thisTalon.getErrorDerivative();
    } else {
      mLogger.verbose(deviceNumber + ": getErrorDerivative()");
      return 0;
    }
  }

  public void selectProfileSlot(int slotIdx, int pidIdx) {
    if (Robot.isReal()) {
      thisTalon.selectProfileSlot(slotIdx, pidIdx);
    } else {
      mLogger.verbose(
          deviceNumber
              + ": selectProfileSlot("
              + String.valueOf(slotIdx)
              + ", "
              + String.valueOf(pidIdx)
              + ")");
    }
  }

  public double getClosedLoopTarget(int pidIdx) {
    if (Robot.isReal()) {
      return thisTalon.getClosedLoopTarget(pidIdx);
    } else {
      mLogger.verbose(deviceNumber + ": getClosedLoopTarget(" + String.valueOf(pidIdx) + ")");
      return 0;
    }
  }

  public double getClosedLoopTarget() {
    if (Robot.isReal()) {
      return thisTalon.getClosedLoopTarget();
    } else {
      mLogger.verbose(deviceNumber + ": getClosedLoopTarget()");
      return 0;
    }
  }

  public double getActiveTrajectoryPosition() {
    if (Robot.isReal()) {
      return thisTalon.getActiveTrajectoryPosition();
    } else {
      mLogger.verbose(deviceNumber + ": getActiveTrajectoryPosition()");
      return 0;
    }
  }

  public double getActiveTrajectoryPosition(int pidIdx) {
    if (Robot.isReal()) {
      return thisTalon.getActiveTrajectoryPosition(pidIdx);
    } else {
      mLogger.verbose(
          deviceNumber + ": getActiveTrajectoryPosition(" + String.valueOf(pidIdx) + ")");
      return 0;
    }
  }

  public double getActiveTrajectoryVelocity() {
    if (Robot.isReal()) {
      return thisTalon.getActiveTrajectoryVelocity();
    } else {
      mLogger.verbose(deviceNumber + ": getActiveTrajectoryVelocity()");
      return 0;
    }
  }

  public double getActiveTrajectoryVelocity(int pidIdx) {
    if (Robot.isReal()) {
      return thisTalon.getActiveTrajectoryVelocity(pidIdx);
    } else {
      mLogger.verbose(
          deviceNumber + ": getActiveTrajectoryVelocity(" + String.valueOf(pidIdx) + ")");
      return 0;
    }
  }

  //TODO: Fix
  /*
  public double getActiveTrajectoryHeading() {
    if (Robot.isReal()) {
      return thisTalon.getActiveTrajectoryHeading();
    } else {
      mLogger.verbose(deviceNumber + ": getActiveTrajectoryHeading()");
      return 0;
    }
  }
  */

  //TODO: Fix
  /*
  public double getActiveTrajectoryArbFeedFwd() {
    if (Robot.isReal()) {
      return thisTalon.getActiveTrajectoryArbFeedFwd();
    } else {
      mLogger.verbose(deviceNumber + ": getActiveTrajectoryArbFeedFwd()");
      return 0;
    }
  }
  */

  public double getActiveTrajectoryArbFeedFwd(int pidIdx) {
    if (Robot.isReal()) {
      return thisTalon.getActiveTrajectoryArbFeedFwd(pidIdx);
    } else {
      mLogger.verbose(
          deviceNumber + ": getActiveTrajectoryArbFeedFwd(" + String.valueOf(pidIdx) + ")");
      return 0;
    }
  }

  public ErrorCode configMotionCruiseVelocity(double sensorUnitsPer100ms, int timeoutMs) {
    if (Robot.isReal()) {
      return thisTalon.configMotionCruiseVelocity(sensorUnitsPer100ms, timeoutMs);
    } else {
      mLogger.verbose(
          deviceNumber
              + ": configMotionCruiseVelocity("
              + String.valueOf(sensorUnitsPer100ms)
              + ", "
              + String.valueOf(timeoutMs)
              + ")");
      return null;
    }
  }

  public ErrorCode configMotionCruiseVelocity(int sensorUnitsPer100ms) {
    if (Robot.isReal()) {
      return thisTalon.configMotionCruiseVelocity(sensorUnitsPer100ms);
    } else {
      mLogger.verbose(
          deviceNumber
              + ": configMotionCruiseVelocity("
              + String.valueOf(sensorUnitsPer100ms)
              + ")");
      return null;
    }
  }

  public ErrorCode configMotionAcceleration(double sensorUnitsPer100msPerSec, int timeoutMs) {
    if (Robot.isReal()) {
      return thisTalon.configMotionAcceleration(sensorUnitsPer100msPerSec, timeoutMs);
    } else {
      mLogger.verbose(
          deviceNumber
              + ": configMotionAcceleration("
              + String.valueOf(sensorUnitsPer100msPerSec)
              + ", "
              + String.valueOf(timeoutMs)
              + ")");
      return null;
    }
  }

  public ErrorCode configMotionAcceleration(int sensorUnitsPer100msPerSec) {
    if (Robot.isReal()) {
      return thisTalon.configMotionAcceleration(sensorUnitsPer100msPerSec);
    } else {
      mLogger.verbose(
          deviceNumber
              + ": configMotionAcceleration("
              + String.valueOf(sensorUnitsPer100msPerSec)
              + ")");
      return null;
    }
  }

  public ErrorCode configMotionSCurveStrength(int curveStrength, int timeoutMs) {
    if (Robot.isReal()) {
      return thisTalon.configMotionSCurveStrength(curveStrength, timeoutMs);
    } else {
      mLogger.verbose(
          deviceNumber
              + ": configMotionSCurveStrength("
              + String.valueOf(curveStrength)
              + ", "
              + String.valueOf(timeoutMs)
              + ")");
      return null;
    }
  }

  public ErrorCode configMotionSCurveStrength(int curveStrength) {
    if (Robot.isReal()) {
      return thisTalon.configMotionSCurveStrength(curveStrength);
    } else {
      mLogger.verbose(
          deviceNumber + ": configMotionSCurveStrength(" + String.valueOf(curveStrength) + ")");
      return null;
    }
  }

  public ErrorCode clearMotionProfileTrajectories() {
    if (Robot.isReal()) {
      return thisTalon.clearMotionProfileTrajectories();
    } else {
      mLogger.verbose(deviceNumber + ": clearMotionProfileTrajectories()");
      return null;
    }
  }

  public int getMotionProfileTopLevelBufferCount() {
    if (Robot.isReal()) {
      return thisTalon.getMotionProfileTopLevelBufferCount();
    } else {
      mLogger.verbose(deviceNumber + ": getMotionProfileTopLevelBufferCount()");
      return 0;
    }
  }

  public ErrorCode pushMotionProfileTrajectory(TrajectoryPoint trajPt) {
    if (Robot.isReal()) {
      return thisTalon.pushMotionProfileTrajectory(trajPt);
    } else {
      mLogger.verbose(
          deviceNumber + ": pushMotionProfileTrajectory(" + String.valueOf(trajPt) + ")");
      return null;
    }
  }

  public ErrorCode startMotionProfile(
      BufferedTrajectoryPointStream stream, int minBufferedPts, ControlMode motionProfControlMode) {
    if (Robot.isReal()) {
      return thisTalon.startMotionProfile(stream, minBufferedPts, motionProfControlMode);
    } else {
      mLogger.verbose(
          deviceNumber
              + ": startMotionProfile("
              + String.valueOf(stream)
              + ", "
              + String.valueOf(minBufferedPts)
              + ", "
              + String.valueOf(motionProfControlMode)
              + ")");
      return null;
    }
  }

  public boolean isMotionProfileFinished() {
    if (Robot.isReal()) {
      return thisTalon.isMotionProfileFinished();
    } else {
      mLogger.verbose(deviceNumber + ": isMotionProfileFinished()");
      return false;
    }
  }

  public boolean isMotionProfileTopLevelBufferFull() {
    if (Robot.isReal()) {
      return thisTalon.isMotionProfileTopLevelBufferFull();
    } else {
      mLogger.verbose(deviceNumber + ": isMotionProfileTopLevelBufferFull()");
      return false;
    }
  }

  public void processMotionProfileBuffer() {
    if (Robot.isReal()) {
      thisTalon.processMotionProfileBuffer();
    } else {
      mLogger.verbose(deviceNumber + ": processMotionProfileBuffer()");
    }
  }

  public ErrorCode getMotionProfileStatus(MotionProfileStatus statusToFill) {
    if (Robot.isReal()) {
      return thisTalon.getMotionProfileStatus(statusToFill);
    } else {
      mLogger.verbose(
          deviceNumber + ": getMotionProfileStatus(" + String.valueOf(statusToFill) + ")");
      return null;
    }
  }

  public ErrorCode clearMotionProfileHasUnderrun(int timeoutMs) {
    if (Robot.isReal()) {
      return thisTalon.clearMotionProfileHasUnderrun(timeoutMs);
    } else {
      mLogger.verbose(
          deviceNumber + ": clearMotionProfileHasUnderrun(" + String.valueOf(timeoutMs) + ")");
      return null;
    }
  }

  public ErrorCode clearMotionProfileHasUnderrun() {
    if (Robot.isReal()) {
      return thisTalon.clearMotionProfileHasUnderrun();
    } else {
      mLogger.verbose(deviceNumber + ": clearMotionProfileHasUnderrun()");
      return null;
    }
  }

  public ErrorCode changeMotionControlFramePeriod(int periodMs) {
    if (Robot.isReal()) {
      return thisTalon.changeMotionControlFramePeriod(periodMs);
    } else {
      mLogger.verbose(
          deviceNumber + ": changeMotionControlFramePeriod(" + String.valueOf(periodMs) + ")");
      return null;
    }
  }

  public ErrorCode configMotionProfileTrajectoryPeriod(int baseTrajDurationMs, int timeoutMs) {
    if (Robot.isReal()) {
      return thisTalon.configMotionProfileTrajectoryPeriod(baseTrajDurationMs, timeoutMs);
    } else {
      mLogger.verbose(
          deviceNumber
              + ": configMotionProfileTrajectoryPeriod("
              + String.valueOf(baseTrajDurationMs)
              + ", "
              + String.valueOf(timeoutMs)
              + ")");
      return null;
    }
  }

  public ErrorCode configMotionProfileTrajectoryPeriod(int baseTrajDurationMs) {
    if (Robot.isReal()) {
      return thisTalon.configMotionProfileTrajectoryPeriod(baseTrajDurationMs);
    } else {
      mLogger.verbose(
          deviceNumber
              + ": configMotionProfileTrajectoryPeriod("
              + String.valueOf(baseTrajDurationMs)
              + ")");
      return null;
    }
  }

  public ErrorCode configMotionProfileTrajectoryInterpolationEnable(boolean enable, int timeoutMs) {
    if (Robot.isReal()) {
      return thisTalon.configMotionProfileTrajectoryInterpolationEnable(enable, timeoutMs);
    } else {
      mLogger.verbose(
          deviceNumber
              + ": configMotionProfileTrajectoryInterpolationEnable("
              + String.valueOf(enable)
              + ", "
              + String.valueOf(timeoutMs)
              + ")");
      return null;
    }
  }

  public ErrorCode configMotionProfileTrajectoryInterpolationEnable(boolean enable) {
    if (Robot.isReal()) {
      return thisTalon.configMotionProfileTrajectoryInterpolationEnable(enable);
    } else {
      mLogger.verbose(
          deviceNumber
              + ": configMotionProfileTrajectoryInterpolationEnable("
              + String.valueOf(enable)
              + ")");
      return null;
    }
  }

  public ErrorCode configFeedbackNotContinuous(boolean feedbackNotContinuous, int timeoutMs) {
    if (Robot.isReal()) {
      return thisTalon.configFeedbackNotContinuous(feedbackNotContinuous, timeoutMs);
    } else {
      mLogger.verbose(
          deviceNumber
              + ": configFeedbackNotContinuous("
              + String.valueOf(feedbackNotContinuous)
              + ", "
              + String.valueOf(timeoutMs)
              + ")");
      return null;
    }
  }

  public ErrorCode configRemoteSensorClosedLoopDisableNeutralOnLOS(
      boolean remoteSensorClosedLoopDisableNeutralOnLOS, int timeoutMs) {
    if (Robot.isReal()) {
      return thisTalon.configRemoteSensorClosedLoopDisableNeutralOnLOS(
          remoteSensorClosedLoopDisableNeutralOnLOS, timeoutMs);
    } else {
      mLogger.verbose(
          deviceNumber
              + ": configRemoteSensorClosedLoopDisableNeutralOnLOS("
              + String.valueOf(remoteSensorClosedLoopDisableNeutralOnLOS)
              + ", "
              + String.valueOf(timeoutMs)
              + ")");
      return null;
    }
  }

  public ErrorCode configClearPositionOnLimitF(boolean clearPositionOnLimitF, int timeoutMs) {
    if (Robot.isReal()) {
      return thisTalon.configClearPositionOnLimitF(clearPositionOnLimitF, timeoutMs);
    } else {
      mLogger.verbose(
          deviceNumber
              + ": configClearPositionOnLimitF("
              + String.valueOf(clearPositionOnLimitF)
              + ", "
              + String.valueOf(timeoutMs)
              + ")");
      return null;
    }
  }

  public ErrorCode configClearPositionOnLimitR(boolean clearPositionOnLimitR, int timeoutMs) {
    if (Robot.isReal()) {
      return thisTalon.configClearPositionOnLimitR(clearPositionOnLimitR, timeoutMs);
    } else {
      mLogger.verbose(
          deviceNumber
              + ": configClearPositionOnLimitR("
              + String.valueOf(clearPositionOnLimitR)
              + ", "
              + String.valueOf(timeoutMs)
              + ")");
      return null;
    }
  }

  public ErrorCode configClearPositionOnQuadIdx(boolean clearPositionOnQuadIdx, int timeoutMs) {
    if (Robot.isReal()) {
      return thisTalon.configClearPositionOnQuadIdx(clearPositionOnQuadIdx, timeoutMs);
    } else {
      mLogger.verbose(
          deviceNumber
              + ": configClearPositionOnQuadIdx("
              + String.valueOf(clearPositionOnQuadIdx)
              + ", "
              + String.valueOf(timeoutMs)
              + ")");
      return null;
    }
  }

  public ErrorCode configLimitSwitchDisableNeutralOnLOS(
      boolean limitSwitchDisableNeutralOnLOS, int timeoutMs) {
    if (Robot.isReal()) {
      return thisTalon.configLimitSwitchDisableNeutralOnLOS(
          limitSwitchDisableNeutralOnLOS, timeoutMs);
    } else {
      mLogger.verbose(
          deviceNumber
              + ": configLimitSwitchDisableNeutralOnLOS("
              + String.valueOf(limitSwitchDisableNeutralOnLOS)
              + ", "
              + String.valueOf(timeoutMs)
              + ")");
      return null;
    }
  }

  public ErrorCode configSoftLimitDisableNeutralOnLOS(
      boolean softLimitDisableNeutralOnLOS, int timeoutMs) {
    if (Robot.isReal()) {
      return thisTalon.configSoftLimitDisableNeutralOnLOS(softLimitDisableNeutralOnLOS, timeoutMs);
    } else {
      mLogger.verbose(
          deviceNumber
              + ": configSoftLimitDisableNeutralOnLOS("
              + String.valueOf(softLimitDisableNeutralOnLOS)
              + ", "
              + String.valueOf(timeoutMs)
              + ")");
      return null;
    }
  }

  public ErrorCode configPulseWidthPeriod_EdgesPerRot(
      int pulseWidthPeriod_EdgesPerRot, int timeoutMs) {
    if (Robot.isReal()) {
      return thisTalon.configPulseWidthPeriod_EdgesPerRot(pulseWidthPeriod_EdgesPerRot, timeoutMs);
    } else {
      mLogger.verbose(
          deviceNumber
              + ": configPulseWidthPeriod_EdgesPerRot("
              + String.valueOf(pulseWidthPeriod_EdgesPerRot)
              + ", "
              + String.valueOf(timeoutMs)
              + ")");
      return null;
    }
  }

  public ErrorCode configPulseWidthPeriod_FilterWindowSz(
      int pulseWidthPeriod_FilterWindowSz, int timeoutMs) {
    if (Robot.isReal()) {
      return thisTalon.configPulseWidthPeriod_FilterWindowSz(
          pulseWidthPeriod_FilterWindowSz, timeoutMs);
    } else {
      mLogger.verbose(
          deviceNumber
              + ": configPulseWidthPeriod_FilterWindowSz("
              + String.valueOf(pulseWidthPeriod_FilterWindowSz)
              + ", "
              + String.valueOf(timeoutMs)
              + ")");
      return null;
    }
  }

  public ErrorCode getLastError() {
    if (Robot.isReal()) {
      return thisTalon.getLastError();
    } else {
      mLogger.verbose(deviceNumber + ": getLastError()");
      return null;
    }
  }

  public ErrorCode getFaults(Faults toFill) {
    if (Robot.isReal()) {
      return thisTalon.getFaults(toFill);
    } else {
      mLogger.verbose(deviceNumber + ": getFaults(" + String.valueOf(toFill) + ")");
      return null;
    }
  }

  public ErrorCode getStickyFaults(StickyFaults toFill) {
    if (Robot.isReal()) {
      return thisTalon.getStickyFaults(toFill);
    } else {
      mLogger.verbose(deviceNumber + ": getStickyFaults(" + String.valueOf(toFill) + ")");
      return null;
    }
  }

  public ErrorCode clearStickyFaults(int timeoutMs) {
    if (Robot.isReal()) {
      return thisTalon.clearStickyFaults(timeoutMs);
    } else {
      mLogger.verbose(deviceNumber + ": clearStickyFaults(" + String.valueOf(timeoutMs) + ")");
      return null;
    }
  }

  public ErrorCode clearStickyFaults() {
    if (Robot.isReal()) {
      return thisTalon.clearStickyFaults();
    } else {
      mLogger.verbose(deviceNumber + ": clearStickyFaults()");
      return null;
    }
  }

  public int getFirmwareVersion() {
    if (Robot.isReal()) {
      return thisTalon.getFirmwareVersion();
    } else {
      mLogger.verbose(deviceNumber + ": getFirmwareVersion()");
      return 0;
    }
  }

  public boolean hasResetOccurred() {
    if (Robot.isReal()) {
      return thisTalon.hasResetOccurred();
    } else {
      mLogger.verbose(deviceNumber + ": hasResetOccurred()");
      return false;
    }
  }

  public ErrorCode configSetCustomParam(int newValue, int paramIndex, int timeoutMs) {
    if (Robot.isReal()) {
      return thisTalon.configSetCustomParam(newValue, paramIndex, timeoutMs);
    } else {
      mLogger.verbose(
          deviceNumber
              + ": configSetCustomParam("
              + String.valueOf(newValue)
              + ", "
              + String.valueOf(paramIndex)
              + ", "
              + String.valueOf(timeoutMs)
              + ")");
      return null;
    }
  }

  public ErrorCode configSetCustomParam(int newValue, int paramIndex) {
    if (Robot.isReal()) {
      return thisTalon.configSetCustomParam(newValue, paramIndex);
    } else {
      mLogger.verbose(
          deviceNumber
              + ": configSetCustomParam("
              + String.valueOf(newValue)
              + ", "
              + String.valueOf(paramIndex)
              + ")");
      return null;
    }
  }

  public int configGetCustomParam(int paramIndex, int timeoutMs) {
    if (Robot.isReal()) {
      return thisTalon.configGetCustomParam(paramIndex, timeoutMs);
    } else {
      mLogger.verbose(
          deviceNumber
              + ": configGetCustomParam("
              + String.valueOf(paramIndex)
              + ", "
              + String.valueOf(timeoutMs)
              + ")");
      return 0;
    }
  }

  public int configGetCustomParam(int paramIndex) {
    if (Robot.isReal()) {
      return thisTalon.configGetCustomParam(paramIndex);
    } else {
      mLogger.verbose(deviceNumber + ": configGetCustomParam(" + String.valueOf(paramIndex) + ")");
      return 0;
    }
  }

  public ErrorCode configSetParameter(
      ParamEnum param, double value, int subValue, int ordinal, int timeoutMs) {
    if (Robot.isReal()) {
      return thisTalon.configSetParameter(param, value, subValue, ordinal, timeoutMs);
    } else {
      mLogger.verbose(
          deviceNumber
              + ": configSetParameter("
              + String.valueOf(param)
              + ", "
              + String.valueOf(value)
              + ", "
              + String.valueOf(subValue)
              + ", "
              + String.valueOf(ordinal)
              + ", "
              + String.valueOf(timeoutMs)
              + ")");
      return null;
    }
  }

  public ErrorCode configSetParameter(ParamEnum param, double value, int subValue, int ordinal) {
    if (Robot.isReal()) {
      return thisTalon.configSetParameter(param, value, subValue, ordinal);
    } else {
      mLogger.verbose(
          deviceNumber
              + ": configSetParameter("
              + String.valueOf(param)
              + ", "
              + String.valueOf(value)
              + ", "
              + String.valueOf(subValue)
              + ", "
              + String.valueOf(ordinal)
              + ")");
      return null;
    }
  }

  public ErrorCode configSetParameter(
      int param, double value, int subValue, int ordinal, int timeoutMs) {
    if (Robot.isReal()) {
      return thisTalon.configSetParameter(param, value, subValue, ordinal, timeoutMs);
    } else {
      mLogger.verbose(
          deviceNumber
              + ": configSetParameter("
              + String.valueOf(param)
              + ", "
              + String.valueOf(value)
              + ", "
              + String.valueOf(subValue)
              + ", "
              + String.valueOf(ordinal)
              + ", "
              + String.valueOf(timeoutMs)
              + ")");
      return null;
    }
  }

  public ErrorCode configSetParameter(int param, double value, int subValue, int ordinal) {
    if (Robot.isReal()) {
      return thisTalon.configSetParameter(param, value, subValue, ordinal);
    } else {
      mLogger.verbose(
          deviceNumber
              + ": configSetParameter("
              + String.valueOf(param)
              + ", "
              + String.valueOf(value)
              + ", "
              + String.valueOf(subValue)
              + ", "
              + String.valueOf(ordinal)
              + ")");
      return null;
    }
  }

  public double configGetParameter(ParamEnum param, int ordinal, int timeoutMs) {
    if (Robot.isReal()) {
      return thisTalon.configGetParameter(param, ordinal, timeoutMs);
    } else {
      mLogger.verbose(
          deviceNumber
              + ": configGetParameter("
              + String.valueOf(param)
              + ", "
              + String.valueOf(ordinal)
              + ", "
              + String.valueOf(timeoutMs)
              + ")");
      return 0;
    }
  }

  public double configGetParameter(ParamEnum param, int ordinal) {
    if (Robot.isReal()) {
      return thisTalon.configGetParameter(param, ordinal);
    } else {
      mLogger.verbose(
          deviceNumber
              + ": configGetParameter("
              + String.valueOf(param)
              + ", "
              + String.valueOf(ordinal)
              + ")");
      return 0;
    }
  }

  public double configGetParameter(int param, int ordinal, int timeoutMs) {
    if (Robot.isReal()) {
      return thisTalon.configGetParameter(param, ordinal, timeoutMs);
    } else {
      mLogger.verbose(
          deviceNumber
              + ": configGetParameter("
              + String.valueOf(param)
              + ", "
              + String.valueOf(ordinal)
              + ", "
              + String.valueOf(timeoutMs)
              + ")");
      return 0;
    }
  }

  public double configGetParameter(int param, int ordinal) {
    if (Robot.isReal()) {
      return thisTalon.configGetParameter(param, ordinal);
    } else {
      mLogger.verbose(
          deviceNumber
              + ": configGetParameter("
              + String.valueOf(param)
              + ", "
              + String.valueOf(ordinal)
              + ")");
      return 0;
    }
  }

  public int getBaseID() {
    if (Robot.isReal()) {
      return thisTalon.getBaseID();
    } else {
      mLogger.verbose(deviceNumber + ": getBaseID()");
      return 0;
    }
  }

  public ControlMode getControlMode() {
    if (Robot.isReal()) {
      return thisTalon.getControlMode();
    } else {
      mLogger.verbose(deviceNumber + ": getControlMode()");
      return null;
    }
  }

  public void follow(IMotorController masterToFollow, FollowerType followerType) {
    if (Robot.isReal()) {
      thisTalon.follow(masterToFollow, followerType);
    } else {
      mLogger.verbose(
          deviceNumber
              + ": follow("
              + String.valueOf(masterToFollow)
              + ", "
              + String.valueOf(followerType)
              + ")");
    }
  }

  public void follow(IMotorController masterToFollow) {
    if (Robot.isReal()) {
      thisTalon.follow(masterToFollow);
    } else {
      mLogger.verbose(deviceNumber + ": follow(" + String.valueOf(masterToFollow) + ")");
    }
  }

  public void valueUpdated() {
    if (Robot.isReal()) {
      thisTalon.valueUpdated();
    } else {
      mLogger.verbose(deviceNumber + ": valueUpdated()");
    }
  }

  public ErrorCode configureSlot(SlotConfiguration slot) {
    if (Robot.isReal()) {
      return thisTalon.configureSlot(slot);
    } else {
      mLogger.verbose(deviceNumber + ": configureSlot(" + String.valueOf(slot) + ")");
      return null;
    }
  }

  public ErrorCode configureSlot(SlotConfiguration slot, int slotIdx, int timeoutMs) {
    if (Robot.isReal()) {
      return thisTalon.configureSlot(slot, slotIdx, timeoutMs);
    } else {
      mLogger.verbose(
          deviceNumber
              + ": configureSlot("
              + String.valueOf(slot)
              + ", "
              + String.valueOf(slotIdx)
              + ", "
              + String.valueOf(timeoutMs)
              + ")");
      return null;
    }
  }

  public void getSlotConfigs(SlotConfiguration slot, int slotIdx, int timeoutMs) {
    if (Robot.isReal()) {
      thisTalon.getSlotConfigs(slot, slotIdx, timeoutMs);
    } else {
      mLogger.verbose(
          deviceNumber
              + ": getSlotConfigs("
              + String.valueOf(slot)
              + ", "
              + String.valueOf(slotIdx)
              + ", "
              + String.valueOf(timeoutMs)
              + ")");
    }
  }

  public void getSlotConfigs(SlotConfiguration slot) {
    if (Robot.isReal()) {
      thisTalon.getSlotConfigs(slot);
    } else {
      mLogger.verbose(deviceNumber + ": getSlotConfigs(" + String.valueOf(slot) + ")");
    }
  }

  public ErrorCode configureFilter(
      FilterConfiguration filter, int ordinal, int timeoutMs, boolean enableOptimizations) {
    if (Robot.isReal()) {
      return thisTalon.configureFilter(filter, ordinal, timeoutMs, enableOptimizations);
    } else {
      mLogger.verbose(
          deviceNumber
              + ": configureFilter("
              + String.valueOf(filter)
              + ", "
              + String.valueOf(ordinal)
              + ", "
              + String.valueOf(timeoutMs)
              + ", "
              + String.valueOf(enableOptimizations)
              + ")");
      return null;
    }
  }

  public ErrorCode configureFilter(FilterConfiguration filter, int ordinal, int timeoutMs) {
    if (Robot.isReal()) {
      return thisTalon.configureFilter(filter, ordinal, timeoutMs);
    } else {
      mLogger.verbose(
          deviceNumber
              + ": configureFilter("
              + String.valueOf(filter)
              + ", "
              + String.valueOf(ordinal)
              + ", "
              + String.valueOf(timeoutMs)
              + ")");
      return null;
    }
  }

  public ErrorCode configureFilter(FilterConfiguration filter) {
    if (Robot.isReal()) {
      return thisTalon.configureFilter(filter);
    } else {
      mLogger.verbose(deviceNumber + ": configureFilter(" + String.valueOf(filter) + ")");
      return null;
    }
  }

  public void getFilterConfigs(FilterConfiguration filter, int ordinal, int timeoutMs) {
    if (Robot.isReal()) {
      thisTalon.getFilterConfigs(filter, ordinal, timeoutMs);
    } else {
      mLogger.verbose(
          deviceNumber
              + ": getFilterConfigs("
              + String.valueOf(filter)
              + ", "
              + String.valueOf(ordinal)
              + ", "
              + String.valueOf(timeoutMs)
              + ")");
    }
  }

  public void getFilterConfigs(FilterConfiguration filter) {
    if (Robot.isReal()) {
      thisTalon.getFilterConfigs(filter);
    } else {
      mLogger.verbose(deviceNumber + ": getFilterConfigs(" + String.valueOf(filter) + ")");
    }
  }
}
